name: Build

on:
  workflow_call:
    inputs:
      node-code-pre-test:
        required: false
        type: string
      image-name:
        required: true
        type: string
    secrets:
      SNYK_TOKEN:
        required: false
      DOCKERHUB_USERNAME:
        required: false
      DOCKERHUB_PASSWORD:
        required: false
    outputs:
      test-tag:
        value: ${{ jobs.build.outputs.test-tag }}

permissions: {}

jobs:
  call-workflow:
    uses: ./.github/workflows/build-general.yml
    secrets: inherit
    permissions:
      security-events: write
      actions: read
      contents: read
      issues: read
      pull-requests: read
    with:
      node-code-pre-test: DISABLE

  hadolint:
    name: Lint Dockerfile with Hadolint
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Harden runner
        uses: step-security/harden-runner@1b05615854632b887b69ae1be8cbefe72d3ae423
        with:
          disable-sudo: true
          egress-policy: block
          allowed-endpoints: >
            github.com:443
      - name: Checkout
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11
        with:
          sparse-checkout: src/Dockerfile
          sparse-checkout-cone-mode: false
          persist-credentials: false
          show-progress: false
      - name: Lint
        uses: hadolint/hadolint-action@54c9adbab1582c2ef04b2016b760714a4bfde3cf
        with:
          dockerfile: src/Dockerfile
          failure-threshold: style

  metadata:
    name: Get Docker image metadata
    runs-on: ubuntu-latest
    outputs:
      tags: ${{ steps.meta.outputs.tags }}
      labels: ${{ steps.meta.outputs.labels }}
      sanitized-name: ${{ steps.sanitize.outputs.name }}
    steps:
      - name: Harden runner
        uses: step-security/harden-runner@1b05615854632b887b69ae1be8cbefe72d3ae423
        with:
          disable-sudo: true
          egress-policy: block
          allowed-endpoints: >
            api.github.com:443
      - name: Sanitize image name for Docker Hub
        id: sanitize
        run: |
          username=${name%/*}
          (test $username == $name && echo "name=$name" || echo "name=$(echo $username | tr -d '-')/${name#*/}") >> $GITHUB_OUTPUT
        env:
          name: ${{ inputs.image-name }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@dbef88086f6cef02e264edb7dbf63250c17cef6c
        with:
          images: |
            ${{ github.event.repository.private && format('ghcr.io/{0}', inputs.image-name) || steps.sanitize.outputs.name }}
            ghcr.io/${{ inputs.image-name }}
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}},enable=${{ !startsWith(github.ref_name, 'v0.0') }}
            type=semver,pattern={{major}},enable=${{ !startsWith(github.ref_name, 'v0') }}
            type=sha,prefix={{branch}}-,enable=${{ github.ref_type != 'tag' }}
            type=schedule,pattern=weekly

  build:
    needs: metadata
    name: Build Docker image
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      test-tag: ${{ steps.set-outputs.outputs.test-tag }}
    steps:
      - name: Harden runner
        uses: step-security/harden-runner@1b05615854632b887b69ae1be8cbefe72d3ae423
        with:
          disable-sudo: true
          egress-policy: block
          allowed-endpoints: >
            github.com:443
            registry-1.docker.io:443
            auth.docker.io:443
            docker.io:443
            production.cloudflare.docker.com:443
            dl-cdn.alpinelinux.org:443
      - name: Set outputs
        id: set-outputs
        run: |
          echo "test-tag=${{ inputs.image-name }}:test" >> $GITHUB_OUTPUT
      - name: Build
        uses: warriors-life/.warriors-life-workflows/build-docker-image@dev # TODO: Why GitHub Actions don't support calling local actions from reusable workflows?
        with:
          tags: ${{ steps.set-outputs.outputs.test-tag }}
          labels: ${{ needs.metadata.outputs.labels }}
      - name: Upload Docker image
        uses: actions/upload-artifact@a8a3f3ad30e3422c9c7b888a15615d19a852ae32
        with:
          name: Docker image
          path: /tmp/image.tar

  snyk-docker:
    if: needs.call-workflow.outputs.run-snyk == 'true'
    needs: [build, call-workflow]
    name: Check Docker image for vulnerabilities with Snyk
    permissions:
      security-events: write
    runs-on: ubuntu-latest
    steps:
      - name: Harden runner
        uses: step-security/harden-runner@1b05615854632b887b69ae1be8cbefe72d3ae423
        with:
          disable-sudo: true
          egress-policy: block
          allowed-endpoints: >
            api.github.com:443
            api.snyk.io:443
      - name: Download Docker image
        uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a
        with:
          name: Docker image
          path: /tmp
      - name: Load image
        run: docker load --input /tmp/image.tar
      - name: Run Snyk
        uses: snyk/actions/docker@b98d498629f1c368650224d6d212bf7dfa89e4bf
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: ${{ needs.build.outputs.test-tag }}
          args: --sarif-file-output=snyk-docker.sarif
        continue-on-error: true
      - name: Upload output
        uses: actions/upload-artifact@a8a3f3ad30e3422c9c7b888a15615d19a852ae32
        with:
          name: Snyk (Docker)
          path: snyk-docker.sarif
      - name: Upload SARIF to dashboard
        if: "!github.event.repository.private"
        uses: github/codeql-action/upload-sarif@f31a31c052207cc13b328d6295c5b728bb49568c
        with:
          category: Snyk (Docker)
          sarif_file: snyk-docker.sarif

  test-unit:
    needs: build
    name: Run unit tests
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Harden runner
        uses: step-security/harden-runner@1b05615854632b887b69ae1be8cbefe72d3ae423
        with:
          disable-sudo: true
          egress-policy: block
          allowed-endpoints: >
            api.github.com:443
            github.com:443
            objects.githubusercontent.com:443
            registry.npmjs.org:443
            registry-1.docker.io:443
            auth.docker.io:443
            production.cloudflare.docker.com:443
      - name: Checkout
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11
        with:
          sparse-checkout: test
          persist-credentials: false
          show-progress: false
      - name: Set env variable
        run: export TEST_IMAGE=${{ needs.build.outputs.test-tag }} >> $GITHUB_ENV
      - name: Download Docker image
        uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a
        with:
          name: Docker image
          path: /tmp
      - name: Load image
        run: docker load --input /tmp/image.tar
      - name: Run unit tests
        uses: warriors-life/.warriors-life-workflows/run-unit-tests@dev
        with:
          node-code-pre-test: ${{ inputs.node-code-pre-test }}

  push:
    if: github.event_name != 'pull_request'
    needs: [hadolint, metadata, build, snyk-docker, test-unit]
    name: Push Docker image to the registry
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    steps:
      - name: Harden runner
        uses: step-security/harden-runner@1b05615854632b887b69ae1be8cbefe72d3ae423
        with:
          disable-sudo: true
          egress-policy: block
          allowed-endpoints: >
            github.com:443
            ghcr.io:443
            registry-1.docker.io:443
            auth.docker.io:443
            index.docker.io:443
            docker.io:443
            production.cloudflare.docker.com:443
            hub.docker.com:443
            dl-cdn.alpinelinux.org:443
      - name: Split image name
        id: split
        run: |
          username=${name%/*}
          test $username == $name && username=''
          echo "username=$username" >> $GITHUB_OUTPUT
        env:
          name: ${{ inputs.image-name }}
      - name: Login to GHCR
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}
      - name: Login to Docker Hub
        if: "!github.event.repository.private"
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME || steps.split.outputs.username }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      - name: Build and push Docker image
        uses: warriors-life/.warriors-life-workflows/build-docker-image@dev
        with:
          multi-platforms: true
          tags: ${{ needs.metadata.outputs.tags }}
          labels: ${{ needs.metadata.outputs.labels }}
          push: true
      - name: Update Docker Hub description
        if: "!github.event.repository.private && (github.ref_type == 'tag')"
        uses: peter-evans/dockerhub-description@dc67fad7001ef9e8e3c124cb7a64e16d0a63d864
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME || steps.split.outputs.username }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
          repository: ${{ needs.metadata.outputs.sanitized-name }}
          short-description: ${{ github.event.repository.description }}
          enable-url-completion: true

  release:
    if: github.ref_type == 'tag'
    needs: [metadata, push]
    name: Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Harden runner
        uses: step-security/harden-runner@1b05615854632b887b69ae1be8cbefe72d3ae423
        with:
          disable-sudo: true
          egress-policy: block
          allowed-endpoints: >
            api.github.com:443
            uploads.github.com:443
            github.com:443
            registry-1.docker.io:443
            auth.docker.io:443
            docker.io:443
            production.cloudflare.docker.com:443
            dl-cdn.alpinelinux.org:443
      - name: Checkout
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11
        with:
          persist-credentials: false
          show-progress: false
      - name: Rebuild Docker image
        uses: warriors-life/.warriors-life-workflows/build-docker-image@dev
        with:
          checkout: false
          multi-platforms: true
          tags: ${{ needs.metadata.outputs.tags }}
          labels: ${{ needs.metadata.outputs.labels }}
      - name: Extract release notes
        id: extract-release-notes
        uses: ffurrer2/extract-release-notes@4db7ff8e9cc8a442ab103fd3ddfaebd0f8f36e4c
      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@82a020f1f7f605c65dd2449b392a52c3fcfef7ef
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}
      - name: Get archive name
        id: archive-name
        run: |
          echo "name=$repository-${tag#v}" >> $GITHUB_OUTPUT
        env:
          tag: ${{ github.ref_name }}
          repository: ${{ github.event.repository.name }}
      - name: Sign files
        run: |
          git -c tar.tar.gz.command='gzip -cn' archive --format=tar.gz --prefix="$archivename/" -o "../$archivename.tar.gz" "$tag"
          gpg --armor --detach-sign "../$archivename.tar.gz"
          gpg --armor --detach-sign /tmp/image.tar
        env:
          tag: ${{ github.ref_name }}
          archivename: ${{ steps.archive-name.outputs.name }}
      - name: Release
        uses: softprops/action-gh-release@de2c0eb89ae2a093876385947365aca7b0e5f844
        with:
          files: |
            /tmp/image.tar
            /tmp/image.tar.asc
            ../${{ steps.archive-name.outputs.name }}.tar.gz.asc
          body: ${{ steps.extract-release-notes.outputs.release_notes }}
