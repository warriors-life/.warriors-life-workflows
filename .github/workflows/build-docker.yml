name: Build

on:
  workflow_call:
    inputs:
      node-code-pre-test:
        required: false
        type: string
      image-name:
        required: true
        type: string
    secrets:
      SNYK_TOKEN:
        required: false
      DOCKERHUB_TOKEN:
        required: false
    outputs:
      test-tag:
        value: ${{ jobs.build.outputs.test-tag }}

env:
  REGISTRY: ${{ github.event.repository.private && 'ghcr.io' || '' }}

permissions: {}

jobs:
  call-workflow:
    uses: ./.github/workflows/build-general.yml
    secrets: inherit
    permissions:
      security-events: write
      actions: read
      contents: read
      issues: read
      pull-requests: read
    with:
      node-code-pre-test: DISABLE

  hadolint:
    name: Lint Dockerfile with Hadolint
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Harden runner
        uses: step-security/harden-runner@128a63446a954579617e875aaab7d2978154e969
        with:
          disable-sudo: true
          egress-policy: block
          allowed-endpoints: >
            github.com:443
      - name: Checkout # TODO: too heavy for checking out only one file
        uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab
        with:
          persist-credentials: false
      - name: Lint
        uses: hadolint/hadolint-action@54c9adbab1582c2ef04b2016b760714a4bfde3cf
        with:
          dockerfile: src/Dockerfile
          failure-threshold: style

  metadata:
    name: Get Docker image metadata
    runs-on: ubuntu-latest
    outputs:
      tags: ${{ steps.meta.outputs.tags }}
      labels: ${{ steps.meta.outputs.labels }}
    steps:
      - name: Harden runner
        uses: step-security/harden-runner@128a63446a954579617e875aaab7d2978154e969
        with:
          disable-sudo: true
          egress-policy: block
          allowed-endpoints: >
            api.github.com:443
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@c4ee3adeed93b1fa6a762f209fb01608c1a22f1e
        with:
          images: ${{ env.REGISTRY }}/${{ inputs.image-name }}
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}},enable=${{ !startsWith(github.ref_name, 'v0.0') }}
            type=semver,pattern={{major}},enable=${{ !startsWith(github.ref_name, 'v0') }}
            type=sha,prefix={{branch}}-,enable=${{ github.ref_type != 'tag' }}
            type=schedule,pattern=weekly

  build:
    needs: metadata
    name: Build Docker image
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      test-tag: ${{ steps.set-outputs.outputs.test-tag }}
    steps:
      - name: Harden runner
        uses: step-security/harden-runner@128a63446a954579617e875aaab7d2978154e969
        with:
          disable-sudo: true
          egress-policy: block
          allowed-endpoints: >
            github.com:443
            registry-1.docker.io:443
            auth.docker.io:443
            docker.io:443
            production.cloudflare.docker.com:443
            dl-cdn.alpinelinux.org:443
      - name: Checkout
        uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab
        with:
          persist-credentials: false
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@4b4e9c3e2d4531116a6f8ba8e71fc6e2cb6e6c8c
        with:
          version: https://github.com/docker/buildx.git#ed00243a0ce2a0aee75311b06e32d33b44729689
      - name: Set outputs
        id: set-outputs
        run: |
          echo "test-tag=${{ inputs.image-name }}:test" >> $GITHUB_OUTPUT
      - name: Build
        uses: docker/build-push-action@3b5e8027fcad23fda98b2e3ac259d8d67585f671
        with:
          context: src
          tags: ${{ steps.set-outputs.outputs.test-tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=docker,dest=/tmp/image.tar
          labels: ${{ needs.metadata.outputs.labels }}
      - name: Upload Docker image
        uses: actions/upload-artifact@0b7f8abb1508181956e8e162db84b466c27e18ce
        with:
          name: Docker image
          path: /tmp/image.tar

  snyk-docker:
    if: needs.call-workflow.outputs.run-snyk == 'true'
    needs: [build, call-workflow]
    name: Check Docker image for vulnerabilities with Snyk
    permissions:
      security-events: write
    runs-on: ubuntu-latest
    steps:
      - name: Harden runner
        uses: step-security/harden-runner@128a63446a954579617e875aaab7d2978154e969
        with:
          disable-sudo: true
          egress-policy: block
          allowed-endpoints: >
            api.snyk.io:443
      - name: Download Docker image
        uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a
        with:
          name: Docker image
          path: /tmp
      - name: Load image
        run: docker load --input /tmp/image.tar
      - name: Run Snyk
        uses: snyk/actions/docker@b98d498629f1c368650224d6d212bf7dfa89e4bf
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: ${{ needs.build.outputs.test-tag }}
        continue-on-error: true
      - name: Upload output
        uses: actions/upload-artifact@0b7f8abb1508181956e8e162db84b466c27e18ce
        with:
          name: Snyk (Docker)
          path: snyk.sarif
      - name: Upload SARIF to dashboard
        if: "!github.event.repository.private"
        uses: github/codeql-action/upload-sarif@f31a31c052207cc13b328d6295c5b728bb49568c
        with:
          sarif_file: snyk.sarif
          category: Snyk (Docker)

  test-unit:
    needs: build
    name: Run unit tests
    runs-on: ubuntu-latest
    permissions:
      contents: read
    defaults:
      run:
        working-directory: test
    steps:
      - name: Harden runner
        uses: step-security/harden-runner@128a63446a954579617e875aaab7d2978154e969
        with:
          disable-sudo: true
          egress-policy: block
          allowed-endpoints: >
            api.github.com:443
            github.com:443
            objects.githubusercontent.com:443
            registry.npmjs.org:443
            registry-1.docker.io:443
            auth.docker.io:443
            production.cloudflare.docker.com:443
      - name: Checkout
        uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab
        with:
          persist-credentials: false
      - name: Setup Node
        uses: actions/setup-node@64ed1c7eab4cce3362f8c340dee64e5eaeef8f7c
        with:
          node-version: 18.16.0
      - name: Install Node dependencies
        run: npm ci
      - name: Download Docker image
        uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a
        with:
          name: Docker image
          path: /tmp
      - name: Load image
        run: docker load --input /tmp/image.tar
      - name: Run pre-tests code
        run: eval "$CODE"
        env:
          CODE: ${{ inputs.node-code-pre-test }}
          TEST_IMAGE: ${{ needs.build.outputs.test-tag }}
      - name: Run unit tests
        run: npm test

  push:
    if: github.event_name != 'pull_request'
    needs: [hadolint, metadata, build, snyk-docker, test-unit]
    name: Push Docker image to the registry
    runs-on: ubuntu-latest
    permissions:
      packages: write
    steps:
      - name: Harden runner
        uses: step-security/harden-runner@128a63446a954579617e875aaab7d2978154e969
        with:
          disable-sudo: true
          egress-policy: block
          allowed-endpoints: >
            ghcr.io:443
      - name: Download Docker image
        uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a
        with:
          name: Docker image
          path: /tmp
      - name: Load image
        run: docker load --input /tmp/image.tar
      - name: Split image name
        id: split
        run: |
          echo "username=${name%/*}" >> $GITHUB_OUTPUT
        env:
          name: ${{ inputs.image-name }}
      - name: Login to the registry
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ (env.REGISTRY == 'ghcr.io') && github.actor || steps.split.outputs.username }}
          password: ${{ (env.REGISTRY == 'ghcr.io') && github.token || secrets.DOCKERHUB_TOKEN }}
      - name: Tag Docker image properly
        run: |
          while IFS= read -r tag; do
            echo "Tagging image $tag"
            docker tag ${{ needs.build.outputs.test-tag }} "$tag"
          done <<< "${{ needs.metadata.outputs.tags }}"
      - name: Push Docker image
        run: docker push -a ${{ env.REGISTRY && format('{0}/{1}', env.REGISTRY, inputs.image-name) || inputs.image-name }} # TODO: change this hack when https://github.com/docker/build-push-action/issues/17 will be truly fixed

  release:
    if: github.ref_type == 'tag'
    needs: push
    name: Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Harden runner
        uses: step-security/harden-runner@128a63446a954579617e875aaab7d2978154e969
        with:
          disable-sudo: true
          egress-policy: block
          allowed-endpoints: >
            api.github.com:443
            uploads.github.com:443
            github.com:443
      - name: Checkout
        uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab
        with:
          persist-credentials: false
      - name: Extract release notes
        id: extract-release-notes
        uses: ffurrer2/extract-release-notes@f2dd00dec4102dbc6d7bdf804dfd85546dfa1f0b
      - name: Download Docker image
        uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a
        with:
          name: Docker image
          path: /tmp
      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@72b6676b71ab476b77e676928516f6982eef7a41
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}
      - name: Get archive name
        id: archive-name
        run: |
          echo "name=$repository-${tag#v}" >> $GITHUB_OUTPUT
        env:
          tag: ${{ github.ref_name }}
          repository: ${{ github.event.repository.name }}
      - name: Sign files
        run: |
          git archive --format=tar.gz --prefix="$archive-name/" -o "../$archive-name.tar.gz" "$tag"
          gpg --armor --detach-sign "../$archive-name.tar.gz"
          gpg --armor --detach-sign /tmp/image.tar
        env:
          tag: ${{ github.ref_name }}
          archive-name: ${{ steps.archive-name.outputs.name }}
      - name: Release
        uses: softprops/action-gh-release@de2c0eb89ae2a093876385947365aca7b0e5f844
        with:
          files: |
            /tmp/image.tar
            /tmp/image.tar.asc
            ../${{ steps.archive-name.outputs.name }}.tar.gz.asc
          body: ${{ steps.extract-release-notes.outputs.release_notes }}
